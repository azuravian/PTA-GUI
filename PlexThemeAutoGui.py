import os
import pickle
import re
import shutil
import tempfile
import textwrap
import webbrowser
from json import dump as jsondump
from json import load as jsonload
from json import loads
from os.path import exists
from urllib.request import Request, urlopen

import lorem
import PySimpleGUI as sg
import requests
import urllib3
from moviepy.editor import AudioFileClip as afc
from PIL import Image, ImageFont
from plexapi.server import PlexServer
from pytube import YouTube
from strsimpy import SIFT4
from youtubesearchpython import VideosSearch

FOLDER = 'application/vnd.google-apps.folder'
#GDRIVEID = ""
plexmovies = []
filterlist = []
gdmovies = []
filterstate = False
#APIKEY = ""
#PLEX_URL = ""
#PLEX_TOKEN = ""
#LIBRARY = ""
WORKING_DIR =os.path.dirname(__file__)
SETTINGS_FILE = os.path.join(WORKING_DIR, 'settings_file.cfg')
NO_POSTER = os.path.join(WORKING_DIR, 'noposter.png')
DEFAULT_SETTINGS = {'plex_url': 'http://127.0.0.1:32400', 'plex_token': None , 'gdriveid': '128O8hwhxmPppwJ3ssGKQoepMrKLB5tNA', 'apikey': 'AIzaSyA60Ypw9Xv2hXusCBUEfTDrbgrB8J4ZA5g', 'library': 'Movies', 'theme': sg.theme('DarkGrey11')}
# "Map" from the settings dictionary keys to the window's element keys
SETTINGS_KEYS_TO_ELEMENT_KEYS = {'plex_url': '-PLEX URL-', 'plex_token': '-PLEX TOKEN-', 'gdriveid': '-GDRIVE ID-', 'apikey': '-APIKEY-', 'library': '-MOVIE LIBRARY-', 'theme': '-THEME-'}
on_image = b''
off_image = b''
off_image_disabled = b''
on_image_disabled = b''

#Load configdata
def get_paths():
    """Makes temporary directory and creates paths for storing mp3 and mp4 during processing

    Returns:
        (tuple): a tuple containing:
            tpath (str): temporary directory path
            mp3path (str): path to store mp3 during processing
            mp4path (str): path to store mp4 during processing
    """
    tpath = tempfile.mkdtemp()
    mp3path = os.path.join(tpath, 'theme.mp3')
    mp4path = os.path.join(tpath, 'theme.mp4')
    return tpath,mp3path,mp4path
#End load configdata

################################ Load/Save Settings File ################################
def load_settings(settings_file, default_settings):
    """Reads settings file (JSON) and return dict containing settings

    Args:
        settings_file (str): path to settings file (JSON)
        default_settings (dict): contains settings to use if no settings file is found

    Returns:
        dict: settings read from settings.cfg or created using default_settings
    """
    try:
        with open(settings_file, 'r', encoding='UTF-8') as f:
            settings = jsonload(f)
    except Exception as e:
        sg.popup_quick_message(f'exception {e}', 'No settings file found... \
            will create one for you', keep_on_top=True, background_color='red', text_color='white')
        settings = default_settings
        save_settings(settings_file, settings, None)
    return settings


def save_settings(settings_file, settings, values):
    """Saves settings from dict to settings_file

    Args:
        settings_file (str): path to settings file
        settings (dict): settings in memory
        values (dict): contains currently selected or entered values in GUI window
    """
    if values:      # if there are stuff specified by another window, fill in those values
        for key in SETTINGS_KEYS_TO_ELEMENT_KEYS:  # update window with values read from settings
            try:
                settings[key] = values[SETTINGS_KEYS_TO_ELEMENT_KEYS[key]]
            except Exception:
                print(f'Problem updating settings from window values. Key = {key}')

    with open(settings_file, 'w', encoding='UTF-8') as f:
        jsondump(settings, f)

    sg.popup('Settings saved')

#Google Drive
def get_json(apikey, gdriveid, ps=200, pageToken=None):
    """Loads JSON file from Google Drive

    Args:
        apikey (str): Google API key to be used to load Drive info
        gdriveid (str): Google Drive id for root folder containing subfolders
        ps (int, optional): Page Size for returned JSON (how many results are returned per page). Defaults to 200.
        pageToken (str, optional): token used to load next page if there are remaining entries. Defaults to None.

    Returns:
        dict: dictionary containing info on each subfolder
    """
    url = f"https://www.googleapis.com/drive/v3/files?q='{gdriveid}'+in+parents&key={apikey}"
    if pageToken:
        url = f"{url}&pageToken={pageToken}"
    if ps:
        url = f"{url}&pageSize={ps}"
    response = urlopen(url)
    return loads(response.read())

def dict_to_list(files, json_file):
    """Converts json to list of dicts

    Args:
        files (list): List of files
        json_file (json): JSON File containing files info

    Returns:
        list: List of files from json file
    """
    for f in json_file.get('files'):
        files.append(f)
    return files

def view_video(ytid):
    """Opens Youtube video in default webbrowser

    Args:
        ytid (str): 11 character Youtube ID for video to download
    """
    url = f'https://www.youtube.com/watch?v={ytid}'
    webbrowser.open(url)

def get_video(m, mp3path, mp4path, tpath, ytid):
    """Downloads video from YouTube and convert to theme.mp3 in the movie directory

    Args:
        m (video): Movie from Plex API
        mp3path (str): path to store temp mp3
        mp4path (str): path to store temp mp4
        tpath (str): temp path used by downloader module
        ytid (str): 11 character Youtube ID for video to download
    """
    mpath = os.path.dirname(os.path.abspath(m.locations[0]))
    fpath = os.path.join(mpath, 'theme.mp3')
    url = f'https://www.youtube.com/watch?v={ytid}'
    video = YouTube(url)
    audio = video.streams.filter(only_audio=True, file_extension='mp4').first()
    audio.download(output_path=tpath, filename='theme.mp4')
    audio = afc(mp4path).subclip(0, 200) if video.length >= 201 else afc(mp4path)
    audio.write_audiofile(mp3path, verbose=False, logger=None)
    shutil.copy(mp3path, fpath)
    print('Theme downloaded and saved to movie directory.')
    return

def list_videos(m):
    """Searches YouTube for soundtrack theme songs for the selected movie

    Args:
        m (plexapi.video): movie being searched

    Returns:
        list: contains title and YouTube video id for each of up to 20 results
    """
    r = VideosSearch(f'"{m.title}" "{m.year}" "Movie" Soundtrack Theme Song', limit=20)
    return [{'title': i.get('title'), 'id': i.get('id')} for i in r.resultComponents]

def clear_youtube_list(window):
    """Empties the current Youtube List window and disabled associated buttons

    Args:
        window (PySimpleGui object): the primary GUI window
    """
    window["-YTID CUSTOM-"].update("")
    for i in range(10):
        yttxt = f"-YT TITLE {i}-"
        ytview = f"-YT VIEW {i}-"
        ytget = f"-YT GET {i}-"
        window[yttxt].update("")
        window[ytview].update(disabled=True)
        window[ytget].update(disabled=True)

def check_gd(m, gdmovies):
    """Checks to see if theme already exists in Google Drive

    Args:
        m (plexapi.video): movie object from Plex
        gdmovies (list): list containing all movies with theme songs on the Google Drive

    Returns:
        (tuple): a tuple containing:
            (dict): dictionary representing the matching movie from the Google Drive (if found)
            (bool): boolean representing success or failure of match
    """
    s = SIFT4()
    regstr = '^(.*\s\(\d\d\d\d\))'
    regstr2 = '^(.*)(?<!\(\d\d\d\d\))$'
    for i in gdmovies:
        gdtitle = i.get('name')
        if match := re.findall(regstr, gdtitle):
            title = f'{m.title} ({m.year})'
            gdtitle = match[0]
        elif match := re.findall(regstr2, gdtitle):
            title = f'{m.title}'
            gdtitle = match[0]
        if s.distance(gdtitle.lower(), title.lower()) <= 1:
            print('Found on Google Drive')
            return i, True
    return None, False

def gd_download(i, m, apikey):
    """Downloads theme from Google Drive to associated movie folder (Plex)

    Args:
        i (dict): dictionary representing the movie from the Google Drive
        m (plexapi.video): movie object from Plex
        APIKEY (str): constant containing the Google api key used to interact with Google Drive
    """
    file_id = i.get('id')
    url = f"https://www.googleapis.com/drive/v3/files/{file_id}?alt=media&key={apikey}"
    req = Request(url)
    req.add_header('User-agent', 'Mozilla/5.0')
    mpath = os.path.dirname(os.path.abspath(m.locations[0]))
    fpath = os.path.join(mpath, 'theme.mp3')
    with open(fpath, 'wb') as f:
        f.write(urlopen(req).read())

def get_all(window, apikey):
    global filterlist
    global gdmovies
    progress_bar = start_progress(window)
    for count, m in enumerate(filterlist, start=1):
        update_progress(progress_bar, count, filterlist)
        i, found = check_gd(m, gdmovies)
        if found is True:
            gd_download(i, m, apikey)
    progress_bar.update(visible=False)

def load_gdrive(window, update, apikey, gdriveid):
    global gdmovies
    pkl = os.path.join(os.getcwd(), 'gdrive.pkl')
    if not exists(pkl) or update:
        return update_from_gdrive(window, apikey, gdriveid, pkl)
    with open(pkl, "rb") as file:
        unpickler = pickle.Unpickler(file)
        gdmovies = unpickler.load()

def update_from_gdrive(window, apikey, gdriveid, pkl):
    global gdmovies
    print('Gathering movie list from Google Drive...')
    gdfolders = []
    gdmovies = []
    dj = get_json(apikey, gdriveid)
    gdfolders = dict_to_list(gdfolders, dj)
    progress_bar = window['-PROGRESS2-']
    window['-PROGRESST-'].update("This will take a few minutes:", visible=True)
    progress_bar.update(visible=True)
    window.refresh()

    while "nextPageToken" in dj:
        pageToken=dj.get('nextPageToken')
        dj = get_json(apikey, gdriveid, 200, pageToken)
        gdfolders = dict_to_list(gdfolders, dj)
    for count, f in enumerate(gdfolders, start=1):
        gdfiles = []
        percent_calc = round(count / len(gdfolders) * 100)
        progress_bar.update_bar(percent_calc)
        progress_bar.update()
        dj = get_json(apikey, f.get('id'))
        gdfiles.extend(iter(dj.get('files')))
        for gdf in gdfiles:
            if gdf.get('name') == "theme.mp3":
                mp3 = {'name': f.get('name'), 'id': gdf.get('id')}
                gdmovies.append(mp3)
    window['-PROGRESST-'].update(visible=False)
    progress_bar.update(visible=False)
    with open(pkl, "wb") as file:
        pickle.dump(gdmovies, file)

#Create connection to Plex Server
def connect_plex(url, token):
    print('Connecting to Plex')
    sess = requests.Session()
    # Ignore verifying the SSL certificate
    sess.verify = False
    if not sess.verify:
        # Disable the warning that the request is insecure, we know that...

        urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
    return PlexServer(url, token, session=sess), True
    #End Create connection to Plex Server

def start_progress(window, bar='-PROGRESS-'):
    progress_bar = window[bar]
    progress_bar.update(visible=True)
    window.refresh()
    return progress_bar

def update_progress(pbar, count, l):
    percent_calc = round(count / len(l) * 100)
    pbar.update_bar(percent_calc)
    pbar.update()

def load_plex_movies(lib, window, plex):
    global plexmovies
    global filterlist
    plexmovies = []
    filterlist = []
    filterpkl = []
    progress_bar = start_progress(window)
    librarylist = plex.library.section(lib).all()
    pkl = os.path.join(os.getcwd(), 'filterlist.pkl')
    for count, m in enumerate(librarylist, start=1):
        update_progress(progress_bar, count, librarylist)
        found = False
        mpath = os.path.dirname(os.path.abspath(m.locations[0])) #Path of Plex movie directory
        for _, _, files in os.walk(mpath):
            for file in files:
                if file == 'theme.mp3': #Check to see if theme.mp3 already exists
                    found = True
        if not found:
            plexmovies.append(m)
    window.write_event_value('End', None)
    progress_bar.update(visible=False)
    window["-MOVIE LIST-"].update(plexmovies)
    window["-FILTER-"].update(image_data=off_image)
    if exists(pkl):
        with open(pkl, "rb") as file:
            unpickler = pickle.Unpickler(file)
            filterpkl = unpickler.load()
            for m in librarylist:
                if m.key in filterpkl:
                    filterlist.append(m)


def filter_plex(window):
    global gdmovies
    global plexmovies
    global filterlist
    global filterstate
    pkl = os.path.join(os.getcwd(), 'filterlist.pkl')
    filterlist = []
    filterpkl = []
    filterstate = False
    progress_bar = start_progress(window, '-PROGRESS2-')
    window['-PROGRESST-'].update("This will take a few minutes:", visible=True)
    for count, i in enumerate(plexmovies, start=1):
        update_progress(progress_bar, count, plexmovies)
        _, found = check_gd(i, gdmovies)
        if found is True:
            filterlist.append(i)
            filterpkl.append(i.key)
    progress_bar.update(visible=False)
    window['-PROGRESST-'].update(visible=False)
    with open(pkl, "wb") as file:
        pickle.dump(filterpkl, file)
    window['-MOVIE LIST-'].update(filterlist)
    window['-FILTER-'].update(image_data=on_image)
    filterstate=True
    window['-GET ALL-'].update(disabled=False)

def filter_switch(window):
    global filterstate
    global filterlist
    global plexmovies
    if filterstate is True:
        filterstate = filter_flip(window, off_image, plexmovies, False)
    else:
        filterstate = filter_flip(window, on_image, filterlist, True)
    return filterstate


def filter_flip(window, image_data, arg2, arg3):
    window['-FILTER-'].update(image_data=image_data)
    window['-MOVIE LIST-'].update(arg2)
    fs = arg3
    window['-GET ALL-'].update(disabled=not fs)
    return fs

def get_poster(values):
    m_selected = values['-MOVIE LIST-'][0]
    poster = Image.open(requests.get(m_selected.posterUrl, stream = True, timeout=3).raw)
    pfile = os.path.join(tempfile.mkdtemp(), 'poster.png')
    poster.resize((200,300)).save(pfile, "PNG")
    return m_selected, pfile
#video.movie().__repr__ = movie_format

def adjust_font_size(text):
    bp = 260
    fontsize = 24
    font = ImageFont.truetype("arial.ttf", fontsize)
    while True:
        if font.getsize(text)[0] > bp:
            fontsize -= 1
        else:
            return fontsize
        font = ImageFont.truetype("arial.ttf", fontsize)

########################################## Make a settings window ##########################################
def create_settings_window(settings):
    sg.theme(settings['theme'])

    def TextLabel(text):
        return sg.Text(f'{text}:', justification='r', size=(15,1))

    layout = [  [sg.Text('Settings', font='Any 15')],
                [TextLabel('Plex URL'), sg.Input(k='-PLEX URL-', tooltip="Enter the url for your Plex server in the following format (http://xxx.xxx.xxx.xxx:xxxxx)")],
                [TextLabel('Plex Token'), sg.Input(k='-PLEX TOKEN-', tooltip="Enter your Plex Token")],
                [TextLabel('Google Drive ID'), sg.Input(k='-GDRIVE ID-', tooltip="Enter the Google Drive ID for the folder to save themes")],
                [TextLabel('Google API Key'), sg.Input(k='-APIKEY-', tooltip="Enter the Google API Key to use")],
                [TextLabel('Movie Library'), sg.Input(k='-MOVIE LIBRARY-', tooltip="Enter the name of your Plex movie library")],
                [TextLabel('Color Scheme'),sg.Combo(sg.theme_list(), size=(20, 20), k='-THEME-', tooltip="Change the Color Scheme")],
                [sg.Button('Save'), sg.Button('Exit')]  ]

    window = sg.Window('Settings', layout, keep_on_top=True, finalize=True)

    for key in SETTINGS_KEYS_TO_ELEMENT_KEYS:   # update window with the values read from settings file
        try:
            window[SETTINGS_KEYS_TO_ELEMENT_KEYS[key]].update(value=settings[key])
        except Exception as e:
            print(f'Problem updating PySimpleGUI window from settings. Key = {key}')

    return window

########################################## Main Program Window & Event Loop ##########################################
def create_main_window(settings):
    sg.theme(settings['theme'])
    PLEX_URL = settings['plex_url']
    PLEX_TOKEN = settings['plex_token']
    GDRIVEID = settings['gdriveid']
    APIKEY = settings['apikey']
    LIBRARY = settings['library']
    tpath,mp3path,mp4path = get_paths()
    #Top Row
    config_column = [
        [
            sg.Text("Update Google Drive List"),
            sg.Button("Update", enable_events=True, k='-LOAD GDRIVE-'),
            sg.Text("Update Filter List"),
            sg.Button("Update", enable_events=True, k='-LOAD FILTERLIST-'),
            sg.pin(sg.Text("", k="-PROGRESST-", visible=False)),
            sg.pin(sg.ProgressBar(100, orientation='h', size=(27, 22), k="-PROGRESS2-", visible=False)),
            sg.Push(),
            sg.Button("Settings", enable_events=True, k="-SETTINGS-")
        ]
    ]

    # Left Column
    file_list_column = [
        [
            sg.Frame('Plex Movies: ',[[sg.Button("Load", enable_events=True, k='-LOAD PLEX-', pad=((5,0), 3)),
            sg.pin(sg.ProgressBar(100, orientation='h', size=(13, 22), k="-PROGRESS-", visible=False, pad=(2, 3))),
            sg.Push(),
            sg.Text('Filter: ', font="arial 10", pad=(0, 3)),
            sg.Button(image_data=off_image_disabled, k='-FILTER-', border_width=0),
            sg.Button("Get All", enable_events=True, k='-GET ALL-', disabled=True, pad=((0,5), 3))]], size=(368, 54), vertical_alignment='t')
        ],
        [
            sg.Frame('Movie List: ', [[sg.Listbox(
                values=[], enable_events=True, select_mode='single', size=(48, 26), k="-MOVIE LIST-", auto_size_text=True, expand_y=True
            )]], vertical_alignment='t', expand_y=True)
        ]
    ]

    # Middle Column

    title_column = [
        [
            sg.Push(),
            sg.Frame('', [[sg.Text(text="No Movie Selected",  enable_events=True, k="-TITLE TEXT-", font=('Arial', 24))]], size=(400, 50), element_justification='c'),
            sg.Push()
        ]
    ]

    movie_data = [
        [
            sg.Frame('Director', [[sg.Text("", k="DIRECTOR", justification='c', size=(19, 1))]], title_location='n')
        ],
        [
            sg.Frame('Writer', [[sg.Text("", k="WRITER", justification='c', size=(19, 1))]], title_location='n')
        ],
        [
            sg.Frame('Starring', [[sg.Text("", k="STARRING", justification='c', size=(19, 2))]], title_location='n')
        ],
        [
            sg.Frame('Studio', [[sg.Text("", k="STUDIO", justification='c', size=(19, 1))]], title_location='n')
        ],
        [
            sg.Frame('Genre', [[sg.Text("", k="GENRE", justification='c', size=(19, 2))]], title_location='n')
        ]
    ]

    info_column = [
        [
            sg.Column(movie_data, vertical_alignment='t', size=(180, 300)),
            sg.Push(),
            sg.Frame('', [[sg.Image(filename=NO_POSTER, enable_events=True, k="-POSTER-", size=(200, 300), pad=(0,0,0,0))]], border_width=2, pad=(0,2,0,0)),
            sg.Text('', size=(1,1))
        ],
        [
            sg.Push(),
            sg.Frame('Description', [[sg.Text(text=lorem.paragraph(), enable_events=True, k="-DESCRIPTION-", size=(46, None), justification='c', expand_y=True)]], title_location='n', expand_y=True),
            sg.Push()

        ]
    ]

    display_column = [[sg.Frame('Movie Info:',[
        [
            sg.Column(title_column, justification='center')
        ],
        [
            sg.Column(info_column, justification='center')
            ]], vertical_alignment='t', expand_y=True, size=(420, 400))
        ],
        [
            sg.Frame('Soundtrack Options: ',[
            [sg.Text(text="", enable_events=True, k="-GD-"),
            sg.Push(),
            sg.Button(" Get Theme ", enable_events=True, k="-GD BUTTON-", disabled=True),
        ],
        [
            sg.Text(text="Search for the soundtrack on Youtube", enable_events=True, k="-YT-"),
            sg.Push(),
            sg.Button(" Search Youtube ", enable_events=True, k="-YOUTUBE BUTTON-", disabled=True)
        ]], vertical_alignment='b', expand_x=True)
    ]]

    # Right Column
    output_data = [[sg.Frame('Youtube Results: ', [
        [
            sg.Text("", k="-YT TITLE 0-", size=(35, 2), justification="left"),
            sg.Push(),
            sg.Button(" View ", k="-YT VIEW 0-", disabled=True),
            sg.Button(" Get ", k="-YT GET 0-", disabled=True)
        ],
        [
            sg.Text('_'*200, font=("arial", 2))
        ],
        [   sg.Text("", k="-YT TITLE 1-", size=(35, 2), justification="left"),
            sg.Push(),
            sg.Button(" View ", k="-YT VIEW 1-", disabled=True),
            sg.Button(" Get ", k="-YT GET 1-", disabled=True)
        ],
        [
            sg.Text('_'*200, font=("arial", 2))
        ],
        [   sg.Text("", k="-YT TITLE 2-", size=(35, 2), justification="left"),
            sg.Push(),
            sg.Button(" View ", k="-YT VIEW 2-", disabled=True),
            sg.Button(" Get ", k="-YT GET 2-", disabled=True)
        ],
        [
            sg.Text('_'*200, font=("arial", 2))
        ],
        [   sg.Text("", k="-YT TITLE 3-", size=(35, 2), justification="left"),
            sg.Push(),
            sg.Button(" View ", k="-YT VIEW 3-", disabled=True),
            sg.Button(" Get ", k="-YT GET 3-", disabled=True)
        ],
        [
            sg.Text('_'*200, font=("arial", 2))
        ],
        [
            sg.Text("", k="-YT TITLE 4-", size=(35, 2), justification="left"),
            sg.Push(),
            sg.Button(" View ", k="-YT VIEW 4-", disabled=True),
            sg.Button(" Get ", k="-YT GET 4-", disabled=True)
        ],
        [
            sg.Text('_'*200, font=("arial", 2))
        ],
        [   sg.Text("", k="-YT TITLE 5-", size=(35, 2), justification="left"),
            sg.Push(),
            sg.Button(" View ", k="-YT VIEW 5-", disabled=True),
            sg.Button(" Get ", k="-YT GET 5-", disabled=True)
        ],
        [
            sg.Text('_'*200, font=("arial", 2))
        ],
        [
            sg.Text("", k="-YT TITLE 6-", size=(35, 2), justification="left"),
            sg.Push(),
            sg.Button(" View ", k="-YT VIEW 6-", disabled=True),
            sg.Button(" Get ", k="-YT GET 6-", disabled=True)
        ],
        [
            sg.Text('_'*200, font=("arial", 2))
        ],
        [
            sg.Text("", k="-YT TITLE 7-", size=(35, 2), justification="left"),
            sg.Push(),
            sg.Button(" View ", k="-YT VIEW 7-", disabled=True),
            sg.Button(" Get ", k="-YT GET 7-", disabled=True)
        ],
        [
            sg.Text('_'*200, font=("arial", 2))
        ],
        [
            sg.Text("", k="-YT TITLE 8-", size=(35, 2), justification="left"),
            sg.Push(),
            sg.Button(" View ", k="-YT VIEW 8-", disabled=True),
            sg.Button(" Get ", k="-YT GET 8-", disabled=True)
        ],
        [
            sg.Text('_'*200, font=("arial", 2))
        ],
        [
            sg.Text("", k="-YT TITLE 9-", size=(35, 2), justification="left"),
            sg.Push(),
            sg.Button(" View ", k="-YT VIEW 9-", disabled=True),
            sg.Button(" Get ", k="-YT GET 9-", disabled=True)
        ],
        [
            sg.Text('_'*200, font=("arial", 2))
        ],
        [
            sg.Push(),
            sg.Button("Page 1", enable_events=True, k="PAGE1", disabled=True),
            sg.Button("Page 2", enable_events=True, k="PAGE2", disabled=True),
            sg.Push()
        ],
        [
            sg.VPush()
        ],
        [
            sg.vbottom(sg.Text("Enter Youtube Video ID", justification="right")),
            sg.vbottom(sg.In("", size=(12, 1), k="-YTID CUSTOM-")),
            sg.vbottom(sg.Button(" Get ", k="-YT GET CUSTOM-", disabled=True))
        ]], vertical_alignment='t', expand_y=True)
    ]]


    # ----- Full layout -----
    layout = [
        [
            sg.Column(config_column, expand_x=True, vertical_alignment='t')
        ],
        [
            sg.Column(file_list_column, vertical_alignment='t', expand_y=True),
            #sg.VSeperator(),
            sg.Column(display_column, vertical_alignment='t', expand_y=True),
            #sg.VSeparator(),
            sg.Column(output_data, k="-SEARCHCOL-", expand_y=True, vertical_alignment='t')
        ]
    ]
    return sg.Window('Plex Theme Songs', layout, resizable=True, icon="ThemeSong.ico"), PLEX_URL, PLEX_TOKEN, LIBRARY, tpath, mp3path, mp4path, APIKEY, GDRIVEID

def main():  # sourcery skip: extract-duplicate-method, low-code-quality
    window, settings = None, load_settings(SETTINGS_FILE, DEFAULT_SETTINGS)
    plex_connected = False
    global plexmovies
    global gdmovies
    global filterlist
    global filterstate
    plexmovies = []
    gdmovies = []
    filterlist = []
    filterstate = False
    while True:
        if window is None:
            window, PLEX_URL, PLEX_TOKEN, LIBRARY, tpath, mp3path, mp4path, APIKEY, GDRIVEID = create_main_window(settings)

        event, values = window.read()
        if not plex_connected:
            if PLEX_TOKEN is not None:
                plex, plex_connected = connect_plex(PLEX_URL, PLEX_TOKEN)
            else:
                window.write_event_value('-SETTINGS-', None)
        if (not gdmovies) or (event == "-LOAD GDRIVE-"):
            update = event == "-LOAD GDRIVE-"
            load_gdrive(window, update, APIKEY, GDRIVEID)
        if event in ["Exit", sg.WIN_CLOSED]:
            break
        elif event == "-SETTINGS-":
            event, values = create_settings_window(settings).read(close=True)
            if event == 'Save':
                window.close()
                window = None
                save_settings(SETTINGS_FILE, settings, values)
        elif event == "-LOAD FILTERLIST-":
            if not plexmovies:
                load_plex_movies(LIBRARY, window, plex)
            window["-FILTER-"].update(image_data=on_image_disabled)
            filter_plex(window)
        elif event == "-LOAD PLEX-":
            window["-LOAD PLEX-"].update(disabled=True)
            load_plex_movies(LIBRARY, window, plex)
        elif event == 'End':
            window["-LOAD PLEX-"].update(disabled=False)
        elif event == '-FILTER-':
            filter_switch(window)
        elif event == '-GET ALL-':
            get_all(window, gdmovies, APIKEY, filterlist)
        elif event == "-MOVIE LIST-" and len(values['-MOVIE LIST-']):
            clear_youtube_list(window)
            window["-YOUTUBE BUTTON-"].update(disabled=False)
            movie, img = get_poster(values)
            item, gd = check_gd(movie, gdmovies)
            if gd:
                window["-GD-"].update("Found theme on Google Drive.")
                window["-GD BUTTON-"].update(disabled=False)
            else:
                window["-GD-"].update("Theme not found on Google Drive.")
                window["-GD BUTTON-"].update(disabled=True)
            title = f"{movie.title} ({movie.year})"
            fontsize = adjust_font_size(title)
            genres = get_data_list(movie, 'genres', 10)
            actors = get_data_list(movie, 'actors', 5)
            window["-TITLE TEXT-"].update(font=('Arial', fontsize))
            window["-TITLE TEXT-"].update(title)
            window["-DESCRIPTION-"].update(movie.summary)
            if len(movie.directors) > 0:
                window["DIRECTOR"].update(movie.directors[0].tag)
            if len(movie.writers) > 0:
                window["WRITER"].update(movie.writers[0].tag)
            window["STARRING"].update(actors)
            window["GENRE"].update(genres)
            window["STUDIO"].update(textwrap.shorten(movie.studio, 25))
            window["-POSTER-"].update(img)


        elif event == "-GD BUTTON-":
            gd_download(item, movie, APIKEY)
        elif event == "-YOUTUBE BUTTON-":
            loop = 1
            vids = list_videos(movie)
            splits = list(divide_chunks(vids, 10))
            clear_youtube_list(window)
            gen_vids_list(window, splits, loop)
            window['-YT GET CUSTOM-'].update(disabled=False)
            if len(splits) == 2:
                window["PAGE1"].update(disabled=False)
                window["PAGE2"].update(disabled=False)
        elif event == "PAGE2":
            clear_youtube_list(window)
            loop = 2
            gen_vids_list(window, splits, loop)
        elif event == "PAGE1":
            clear_youtube_list(window)
            loop = 1
            gen_vids_list(window, splits, loop)
        for i in (range(10)):
            if event == f"-YT VIEW {i}-":
                ytid = splits[loop-1][i].get('id')
                view_video(ytid)
            if event == f"-YT GET {i}-":
                ytid = splits[loop-1][i].get('id')
                get_video(movie, mp3path, mp4path, tpath, ytid)
        if event == "-YT GET CUSTOM-":
            get_video(movie, mp3path, mp4path, tpath, values["-YTID CUSTOM-"])
    window.close()

def gen_vids_list(window, splits, loop):
    for count, v in enumerate(splits[loop - 1], start=0):
        yttxt = f"-YT TITLE {count}-"
        ytview = f"-YT VIEW {count}-"
        ytget = f"-YT GET {count}-"
        window[yttxt].update(textwrap.fill(textwrap.shorten(v.get('title'), 60), 35))
        window[ytview].update(disabled=False)
        window[ytget].update(disabled=False)
        window.refresh()

def get_data_list(movie, t, n):
    l = ''
    movie.reload()
    for i in range(min(len(getattr(movie, t)), n)):
        l = getattr(movie, t)[i].tag if i == 0 else f'{l}, {getattr(movie, t)[i].tag}'
    return l


def divide_chunks(l, n):
     
    # looping till length l
    for i in range(0, len(l), n):
        yield l[i:i + n]

if __name__ == "__main__":
    main()
